{"version":3,"sources":["components/Notifier.js","utils/notifier.js","components/JsonSchemaConverter.js","App.js","serviceWorker.js","index.js"],"names":["openSnackbarFn","Notifier","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","_useState3","_useState4","message","setMessage","useEffect","openSnackbar","handleSnackbarClose","_ref","react_default","a","createElement","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","aria-describedby","id","action","IconButton","key","aria-label","color","onClick","Close_default","notify","obj","_ref2","toString","JsonSchemaConverter","jsonData","setJsonData","jsonSchemaData","setJsonSchemaData","Container","TextField","fullWidth","multiline","label","rows","value","onChange","e","target","margin","Button","variant","parseJsonData","JSON","parse","schema","jsonSchemaConverter","stringify","jsonToJsonSchema","InputProps","readOnly","App","Fragment","components_JsonSchemaConverter","components_Notifier","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAIIA,wHAmDWC,MAjDE,WAAM,IAAAC,EACGC,oBAAS,GADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACRI,EADQJ,EAAA,GAAAK,EAESN,mBAAS,IAFlBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEdE,EAFcD,EAAA,GAELE,EAFKF,EAAA,GAIrBG,oBAAU,WACRb,EAAiBc,GAChB,IAEH,IAAMC,EAAsB,WAC1BP,GAAQ,GACRI,EAAW,KAGPE,EAAe,SAAAE,GAAiB,IAAdL,EAAcK,EAAdL,QACtBH,GAAQ,GACRI,EAAWD,IAGb,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdhB,KAAMA,EACNiB,iBAAkB,IAClBC,QAASV,EACTW,aAAc,CACZC,mBAAoB,cAEtBhB,QAASM,EAAAC,EAAAC,cAAA,QAAMS,GAAG,cAAcjB,GAChCkB,OAAQ,CACNZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,IAAI,QACJC,aAAW,QACXC,MAAM,UACNC,QAASnB,GAETE,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,WC1CK,SAASkB,EAAOC,IDiDxB,SAAAC,GAAmC,IAAX3B,EAAW2B,EAAX3B,QAC7BX,EAAe,CAAEW,YCjDjBG,CAAa,CAAEH,QAAS0B,EAAI1B,SAAW0B,EAAIE,aCG7C,IAwDeC,EAxDa,WAAM,IAAAtC,EACAC,mBAAS,IADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBuC,EADyBrC,EAAA,GACfsC,EADetC,EAAA,GAAAK,EAEYN,mBAAS,IAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEzBkC,EAFyBjC,EAAA,GAETkC,EAFSlC,EAAA,GAoBhC,OACEO,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CACEC,WAAS,EACTC,WAAS,EACTC,MAAM,YACNC,KAAK,KACLC,MAAOV,EACPW,SAAU,SAACC,GAAQX,EAAYW,EAAEC,OAAOH,QACxCI,OAAO,YAIXtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,QAAQ,YAAYxB,MAAM,UAAUC,QAAS,SAACmB,GAAD,OA/BlC,WACvB,GAAIZ,EACF,IACE,IAAIiB,EAAgBC,KAAKC,MAAMnB,GAC3BoB,EAASC,kBAAoBJ,GACjCd,EAAkBe,KAAKI,UAAUF,EAAQ,KAAM,IAC/C,MAAOR,GACPT,EAAkB,IAClBR,EAAO,0BAGTQ,EAAkB,IAClBR,EAAO,yBAmBuD4B,KAA5D,2BAKF/C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CACEC,WAAS,EACTC,WAAS,EACTE,KAAK,KACLC,MAAOR,EACPY,OAAO,SACPU,WAAY,CACVC,UAAU,QCzCPC,MATf,WACE,OACElD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkD,SAAA,KACEnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d08a7588.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Snackbar, IconButton } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\n\nlet openSnackbarFn;\n\nconst Notifier = () => {\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    openSnackbarFn = openSnackbar;\n  }, [])\n\n  const handleSnackbarClose = () => {\n    setOpen(false);\n    setMessage('');\n  };\n\n  const openSnackbar = ({ message }) => {\n    setOpen(true);\n    setMessage(message);\n  };\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      open={open}\n      autoHideDuration={6000}\n      onClose={handleSnackbarClose}\n      ContentProps={{\n        'aria-describedby': 'message-id',\n      }}\n      message={<span id=\"message-id\">{message}</span>}\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"Close\"\n          color=\"inherit\"\n          onClick={handleSnackbarClose}\n        >\n          <CloseIcon />\n        </IconButton>,\n      ]}\n    />\n  )\n}\n\nexport function openSnackbar({ message }) {\n  openSnackbarFn({ message });\n}\n\nexport default Notifier;","import { openSnackbar } from '../components/Notifier';\n\nexport default function notify(obj) {\n  openSnackbar({ message: obj.message || obj.toString() });\n}","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Container, Button } from '@material-ui/core';\nimport { convert as jsonSchemaConverter } from 'json-to-json-schema';\nimport notify from '../utils/notifier';\n\nconst JsonSchemaConverter = () => {\n  const [jsonData, setJsonData] = useState('');\n  const [jsonSchemaData, setJsonSchemaData] = useState('');\n\n  const jsonToJsonSchema = () => {\n    if (jsonData) {\n      try {\n        let parseJsonData = JSON.parse(jsonData);\n        let schema = jsonSchemaConverter(parseJsonData);\n        setJsonSchemaData(JSON.stringify(schema, null, 4));\n      } catch (e) {\n        setJsonSchemaData('');\n        notify('Invalid Json Data');\n      }\n    } else {\n      setJsonSchemaData('');\n      notify('Json Data is required');\n    }\n  }\n\n  return (\n    <Container>\n      <div>\n        <TextField\n          fullWidth\n          multiline\n          label=\"Json Data\"\n          rows=\"12\"\n          value={jsonData}\n          onChange={(e) => { setJsonData(e.target.value); }}\n          margin=\"normal\"\n        />\n      </div>\n\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={(e) => jsonToJsonSchema()}>\n          Convert to Json Schema\n        </Button>\n      </div>\n      \n      <div>\n        <TextField\n          fullWidth\n          multiline\n          rows=\"12\"\n          value={jsonSchemaData}\n          margin=\"normal\"\n          InputProps={{\n            readOnly: true\n          }}\n        />\n      </div>\n    </Container>\n  )\n}\n\nexport default JsonSchemaConverter;\n","import React from 'react';\nimport JsonSchemaConverter from './components/JsonSchemaConverter';\nimport Notifier from './components/Notifier';\n\nfunction App() {\n  return (\n    <>\n      <JsonSchemaConverter />\n      <Notifier />\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}